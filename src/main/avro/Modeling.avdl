/**
 * (c) Copyright 2013 WibiData, Inc.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This protocol defines avro objects used for serialization of model definitions and model
 * environments to/from JSON. Some of these records are also used in the return types of methods
 * defined in the ModelDefinition and ModelEnvironment classes.
 */
@namespace("org.kiji.express.avro")
protocol Modeling {
  /**
   * A specification for a single phase of the model lifecycle, consisting of the class that
   * implements the functionality of the phase and the corresponding extractor class that will be
   * used to treat the inputs to the phase.
   */
  record AvroPhaseSpec {
    /**
     * Fully qualified class name of the class that will manipulate the input sources in this phase.
     * This class must implement the extractor trait. Optional.
     */
    union{null, string} extractor_class = null;

    /**
     * Fully qualified class name of the class to use in this phase. This class must implement the
     * appropriate trait for the phase. Required.
     */
    string phase_class;
  }

  /**
   * A specification of the computational phases defining a model workflow.
   *
   * Currently this consists of three phases:
   * - Prepare
   * - Train
   * - Score
   */
  record AvroModelDefinition {
    /**
     * User specified shorthand identifier for this model definition. Required.
     */
    string name;

    /**
     * User specified version number for this model definition. Required.
     */
    string version;

    /**
     * Specification for the prepare phase. The class within must implement the preparer trait.
     * Set this field to null to specify that no prepare phase should be used.
     */
    union{null, string} preparer = null;

    /**
     * Specification for the train phase. The class within must implement the trainer trait.
     * Set this field to null to specify that no train phase should be used.
     */
    union{null, string} trainer = null;

    /**
     * Specification for the score phase. The class within must implement the scorer trait.
     * Set this field to null to specify that no score phase should be used.
     */
    union{null, AvroPhaseSpec} scorer = null;

    /**
     * Unique identifier for this model definition. The current version is model_definition-0.1.0.
     */
    string protocol_version = "model_definition-0.2.0";
  }

  /**
   * Arbitrary name-value pairs.
   */
  record Property {
    /**
     * An identifier for a property. Required.
     */
    string name;

    /**
     * The value for the associated property. Required.
     */
    string value;
  }

  // TODO(EXP-52): Add support for SEQ (sequence files) and TEXT (text files).
  /**
   * An enumeration of supported types of KeyValueStores.
   */
  enum KvStoreType {
    AVRO_KV,
    AVRO_RECORD,
    KIJI_TABLE
  }

  /**
   * A specification of all the resources needed to surface data from a backing store.
   */
  record AvroKVStore {
    /**
     * One of the following valid KVStore types: {AVRO_KV, AVRO_RECORD, KIJI_TABLE}.
     * Required.
     */
    KvStoreType store_type;

    /**
     * User specified shorthand identifier for a key value store. Required.
     */
    string name;

    /**
     * Other properties that may be needed to instantiate and configure a kv store reader.
     */
    array<Property> properties = [];
  }

  /**
   * Note: The following 5 record types defined below, relating to column filters,
   * correspond to their respective HBase filters.
   */

  /**
   * Specification of a ColumnRangeFilter.
   */
  record AvroColumnRangeFilter {
    /** The minimum qualifier bound. null means none.*/
    union{null, string} min_qualifier;

    /** Whether to include the lower bound. */
    boolean min_included;

    /** The maximum qualifier bound. null means none.*/
    union{null, string} max_qualifier;

    /** Whether to include the upper bound. */
    boolean max_included;
  }

  /**
   * Specification of a RegexQualifierFilter.
   */
   record AvroRegexQualifierFilter {
     /** The regular expression for qualifiers that should be
      *  accepted by this filter. The expression is matched against the full qualifier (as
      *  if it implicitly starts with '^' and ends with '$').
      */
      string regex;
   }

   /**
    * Specification of an 'and' filter. This filter combines a list of column filters using a
    * logical AND operator.
    */
   record AvroAndFilter {
     /**
      * The filters to AND together.
      * NOTE: If you are hand-coding the JSON for this field, please ensure you follow the
      * appropriate encoding for unions http://avro.apache.org/docs/current/spec.html#json_encoding
      * in order to avoid potential decoding errors due to ambiguity in the required record type.
      */
     array<union { AvroRegexQualifierFilter, AvroColumnRangeFilter }>
        and_filters;
   }

   /**
    * Specification of an 'or' filter. This filter combines a list of column filters using a
    * logical OR operator.
    * NOTE: If you are hand-coding the JSON for this field, please ensure you follow the
    * appropriate encoding for unions http://avro.apache.org/docs/current/spec.html#json_encoding
    * in order to avoid potential decoding errors due to ambiguity in the required record type.
    */
   record AvroOrFilter {
     /** The filters to OR together. */
     array<union { AvroRegexQualifierFilter, AvroColumnRangeFilter }>
        or_filters;
   }

  /**
   * Column level data request specifications.
   */
  record AvroColumn {
    /**
     * The name of the column to request data from. Required.
     */
    string name;

    /**
     * Maximum number of the most recent versions of a particular column to return. Default is 1.
     */
    int max_versions = 1;

    /**
     * A ColumnFilter to attach to the column. Potentially null.
     * NOTE: If you are hand-coding the JSON for this field, please ensure you follow the
     * appropriate encoding for unions http://avro.apache.org/docs/current/spec.html#json_encoding
     * in order to avoid potential decoding errors due to ambiguity in the required record type.
     */
    union { null, AvroAndFilter, AvroOrFilter, AvroColumnRangeFilter, AvroRegexQualifierFilter }
        filter = null;
  }

  /**
   * Describes a request for columns of data to read from a Kiji table.
   */
  record AvroDataRequest {
    /**
     * Defines the smallest timestamp that cells returned should have, inclusive. This field may be
     * 0 if no lower bound on timestamps should be imposed. The default value of this field is 0.
     */
    long min_timestamp = 0;

    /**
     * Defines the largest timestamp that cells returned should have exclusive. This field may be
     * the maximum possible timestamp (9223372036854775807) if no upper bound on timestamps should
     * be imposed. The default value of this field is 9223372036854775807.
     */
    long max_timestamp = 9223372036854775807;

    /**
     * An array of column level data request specifications. Required.
     */
    array<AvroColumn> column_definitions;
  }

  /**
   * An association between a tuple field name and a column.
   */
  record AvroFieldBinding {
    /**
     * The name of a tuple field to associate with the provided column. Required.
     */
    string tuple_field_name;

    /**
     * The name of the column to associated with the provided tuple field. Required.
     */
    string store_field_name;
  }

  /**
   * Configuration necessary to use a Kiji table as a data source.
   */
  record AvroKijiInputSpec {
    /**
     * Kiji URI addressing the table that this input spec will use. Required.
     */
    string table_uri;

    /**
     * Request describing the input columns required by this input spec.
     */
    AvroDataRequest data_request;

    /**
     * Associations between field names and column names. Required.
     */
    array<AvroFieldBinding> field_bindings;
  }

  /**
   * Configuration necessary to use a Kiji table as a data sink.
   */
  record AvroKijiOutputSpec {
    /**
     * Kiji URI addressing the table that this output spec will use. Required.
     */
    string table_uri;

    /**
     * Timestamp for the output cells.
     */
    union{null, string} time_stamp_field = null;

    /**
     * Associations between field names and column names. Required.
     */
    array<AvroFieldBinding> field_bindings;
  }

  /**
     * Configuration necessary to specify a single output Kiji column. Typically used with the score
     * phase.
     */
    record AvroKijiSingleColumnOutputSpec {
      /**
       * Kiji URI addressing the table that this output spec will use. Required.
       */
      string table_uri;

      /**
       * The Kiji column to write the output of the phase to. Required.
       */
      string output_column;
    }

  /**
   * Represents the configuration for an input data source.
   */
  record AvroInputSpec {
    // TODO(EXP-161): Accept inputs from multiple source types.
    /**
     * Configuration for this input spec.
     * NOTE: If you are hand-coding the JSON for this field, please ensure you follow the
     * appropriate encoding for unions http://avro.apache.org/docs/current/spec.html#json_encoding
     * in order to avoid potential decoding errors due to ambiguity in the required record type.
     */
    union{AvroKijiInputSpec} specification;
  }

  /**
   * Represents the configuration for an output data source.
   */
  record AvroOutputSpec {
    // TODO(EXP-161): Accept outputs from multiple source types.
    /**
     * Configuration for this output spec.
     * NOTE: If you are hand-coding the JSON for this field, please ensure you follow the
     * appropriate encoding for unions http://avro.apache.org/docs/current/spec.html#json_encoding
     * in order to avoid potential decoding errors due to ambiguity in the required record type.
     */
    union{AvroKijiOutputSpec, AvroKijiSingleColumnOutputSpec} specification;
  }

  /**
   * Runtime resource bindings for the prepare phase.
   *
   * Note to developers: Please increment the 'protocol_version' field in AvroModelEnvironment when
   *     modifying this record.
   */
  record AvroPrepareEnvironment {
    /**
     * Defines the input data source that the prepare phase uses. Required.
     */
    AvroInputSpec input_config;

    /**
     * Defines the output data source that the prepare phase uses. Required.
     */
    AvroOutputSpec output_config;

    /**
     * The KVStores needed during the prepare phase. The default value of this field is the empty
     * list.
     */
    array<AvroKVStore> kv_stores = [];
  }

  /**
   * Runtime resource bindings for the train phase.
   *
   * Note to developers: Please increment the 'protocol_version' field in AvroModelEnvironment when
   *     modifying this record.
   */
  record AvroTrainEnvironment {
    /**
     * Defines the input data source that the train phase uses. Required.
     */
    AvroInputSpec input_config;

    /**
     * Defines the output data sources that the train phase uses. Required.
     */
    AvroOutputSpec output_config;

    /**
     * The KVStores needed during the train phase. The default value of this field is the empty
     * list.
     */
    array<AvroKVStore> kv_stores = [];
  }

  /**
   * Runtime resource bindings for the score phase.
   *
   * Note to developers: Please increment the 'protocol_version' field in AvroModelEnvironment when
   *     modifying this record.
   */
  record AvroScoreEnvironment {
    /**
     * Defines the input data source that the score phase uses. Required.
     */
    AvroInputSpec input_config;

    /**
     * A Kiji column to write the output of the score phase to. Required.
     */
    AvroOutputSpec output_config;

    /**
     * An array of KVStores needed during the score phase. The default value of this field is the
     * empty list.
     */
    array<AvroKVStore> kv_stores = [];
  }

  /**
   * Runtime resource bindings for a model definition.
   */
  record AvroModelEnvironment {
    /**
     * Unique identifier for this model environment. The current version is model_environment-0.1.1.
     */
    string protocol_version = "model_environment-0.2.0";

    /**
     * User specified shorthand identifier for this model environment. Required.
     */
    string name;

    /**
     * User specified version number for this particular model environment. Required.
     */
    string version;

    /**
     * Runtime bindings for data sources used in the prepare phase. Potentially null.
     */
    union { null, AvroPrepareEnvironment } prepare_environment = null;

    /**
     * Runtime bindings for data sources used in the train phase. Potentially null.
     */
    union { null, AvroTrainEnvironment } train_environment = null;

    /**
     * Runtime bindings for data sources used in the score phase. Potentially null.
     */
    union { null, AvroScoreEnvironment } score_environment = null;
  }
}
